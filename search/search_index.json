{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hi there \ud83d\udc4b\uff0c I am Daniel Wenbo(mendax1234)</p> <p></p> <p>A Computer Engineering freshman at Nanyang Technological University who is passionate about FIRST Robotics Competition(FRC), Hackintosh, Operating systems, Lego Mindstorms EV3/NXT, uses Logseq to take notes and also excels in Java/Python/Go/C/C++</p> <ul> <li>FRC Team 6940 Program/Software Lead. (2020-2022)</li> <li>6940Swerve-docs founder and core contributor.</li> <li>ThinkPadX390-Opencore-EFI founder and core contributor.</li> </ul> <p>Where to find me</p> <ul> <li>My Blog</li> <li>E-mail: daniel.wb.zhu@gmail.com</li> </ul> <p>Tech preferences</p> \ud83d\udda5 Operating System Windows 11 Pro &amp; macOS(Hackintosh) <p>You are probably also looking for...</p> <ul> <li>To view FRC Team 6940's robot code, go to FRC Team 6940's Official Github Page</li> <li>In my spare time, I use Hackintosh , and here is my EFI for ThinkPad X390 . My primary working machine is also a ThinkPad X390. However, I use Windows 11 Pro as my primary operating system.</li> <li>I also maintain the EFI for the ThinkPad E40, but I no longer use this laptop because it is too old!</li> </ul> <p></p> <p></p>"},{"location":"index.zh/","title":"\u5173\u4e8e","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/08/15/the-conversion-between-binary-and-gray-code/","title":"The conversion between Binary and Gray Code","text":"<p>On the first class of SC1005, l was confused about Gray code and l found that many of my classmates were confused too. But now, after doing some research, l think l have a better understanding of Gray code. So l want to share my understanding with you. Hey, if you are still confused about Gray code, l hope this post can help you.</p>"},{"location":"blog/2023/08/15/the-conversion-between-binary-and-gray-code/#what-is-gray-code","title":"What is Gray code?","text":"<p>The definition of Gray Code on Wikipedia</p> <p>The reflected binary code (RBC), also known as reflected binary (RB) or Gray code after Frank Gray, is an ordering of the binary numeral system such that two successive values differ in only one bit (binary digit). </p> <p>In short, the advantage of Gray code is that juts one bit changes for each step.</p>"},{"location":"blog/2023/08/15/the-conversion-between-binary-and-gray-code/#how-to-convert-binary-to-gray-code","title":"How to convert Binary to Gray Code?","text":""},{"location":"blog/2023/08/15/the-conversion-between-binary-and-gray-code/#things-you-need-to-know-before-starting","title":"Things you need to know before starting","text":"<ol> <li>The XOR operation</li> </ol>"},{"location":"blog/2023/08/15/the-conversion-between-binary-and-gray-code/#binary-to-gray-code-conversion","title":"Binary to Gray code Conversion","text":"<ol> <li>The Most Significant Bit (MSB) of the gray code is always equal to the MSB of the given binary code.</li> <li>Other bits of the output gray code can be obtained by XORing binary code bit  at that index and previous index.</li> </ol>"},{"location":"blog/2023/08/15/the-conversion-between-binary-and-gray-code/#gray-code-to-binary-conversion","title":"Gray code to Binary Conversion","text":"<ol> <li>The Most Significant Bit (MSB) of the binary code is always equal to the MSB  of the given gray code.</li> <li>Other bits of the output binary code can be obtained by checking the gray  code bit at that index. If the current gray code bit is 0, then copy the  previous binary code bit, else copy the invert of the previous binary code bit.</li> </ol>"},{"location":"blog/2023/08/15/the-conversion-between-binary-and-gray-code/#acknowledgement","title":"Acknowledgement","text":"<ul> <li>The definition of Gray Code on Wikipedia</li> <li>The XOR operation</li> <li>The conversion between Binary and Gray Code</li> </ul>"},{"location":"blog/2023/09/09/combinational-circuits-in-digital-logic/","title":"Combinational Circuits in Digital Logic","text":"<ul> <li> Why minterm and maxterms are so called?</li> </ul>"},{"location":"blog/2023/07/23/hello-world/","title":"Hello world","text":"<p>This is the first post of my blog.</p>"},{"location":"blog/2023/08/22/the-first-month-in-ntu/","title":"The first month in NTU","text":"<p>Life in a brand new and unfamiliar environment is always full of challenges. I am not an exception. I have been in NTU for about a month. I have experienced  a lot of things, and I have also learned a lot of things after participating in  the orientation camp, both hall's and school's. </p>"},{"location":"blog/2023/08/22/the-first-month-in-ntu/#orientation-camp","title":"Orientation Camp","text":""},{"location":"blog/2023/08/22/the-first-month-in-ntu/#the-importantce-of-orientation-camp","title":"The importantce of Orientation Camp","text":"<p>When it comes to things that you must not miss in NTU, Orientation will be on my top list. NTU has many orientations, such as Club Orientation, Hall Orientation , School Orientation, etc. Attending these orientations will help you to get to know more about NTU and make more friends (It's true, believe me). And I heard that the friends you had made during the orientation would probably become your long-lasting friends during your study in NTU, even in your future work life. So, if you are a freshie, don't miss the orientation!</p>"},{"location":"blog/2023/08/22/the-first-month-in-ntu/#hall-orientation","title":"Hall Orientation","text":"<p>I heard one of my Chinese friends said that in NTU, you need to get along well with two kinds of people. The first is people who stay in the same hall as you and the second is the people who are in the same school as you. I strongly agree with him. As a twelver, I think Hall 12 is undoubtedly a very social hall. As the only Chinese in my orientation group, I was deeply impressed by the openness and inclusiveness of the local. During the orientation, I met a lot of people from different schools. I also made a lot of friends. Most importantly, I strongly feel that I and my group members are like a whole family. We cooperate to win the game. Perhaps, this lets me remember the similar feeling in FIRST Robotics Competition. After orientation, we will also get together to have dinner or something else, in order to maintain our friendship. </p>"},{"location":"blog/2023/08/22/the-first-month-in-ntu/#school-orientation","title":"School Orientation","text":"<p>Perhaps, comparing to my hall's orientation, our school's (School of Computer Science and Engineering, SCSE) orientation is more like a \"real\" orientation. We have to attend the lectures(but we still have some exciting activities). I think it's also a good thing. Because I can learn more about my school and my major. For example, our school's seniors have provided a very useful link for us to refer to, including the notes for different courses, where to eat in NTU, etc. Also, the friends I had made during this orientation are most likely to be my classmates. So, I think it's also a very important orientation.</p>"},{"location":"blog/2023/08/22/the-first-month-in-ntu/#summary","title":"Summary","text":"<p>All in all, life and courses in NTU may not be as easy as you think before. However, I think this will also provide us with a very good opportunity to learn and grow. So, don't be afraid of the challenges you will face in NTU. Just face them bravely. I believe that you will be able to overcome them and become a better person.</p>"},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/","title":"Overflow in two's complement system","text":"<p>In this post, I will mainly discuss two methods to detect overflow in two's complement system and the reasons behind them. Besides, some information about overflow bit, carry bit, sign bit and zero bit in ALU,  the practical use of two's complement and unsigned binary system will be included.</p>"},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#twos-complement-system","title":"Two's complement system","text":"<p>According to Wikipedia, two's complement is the most common method of representing signed (positive, negative, and zero) integers on computers,[1]and more generally, fixed point binary values. Two's complement uses the binary digit with the greatest place value as the sign to indicate whether the binary number is positive or negative. When the most significant bit is 1, the number is signed as negative; and when the most significant bit is 0 the number is signed as positive.</p> <p>When you study the two's complement, one important thing you can't avoid is to learn how to detect the overflow. In the following section, I will introduce two methods to detect overflow in two's complement system and the reasons behind them.</p> <p>Note</p> <p>In this post, our default is the addition and subtraction between two numbers. If you are facing the addition between more than two numbers, you can use the following method to detect the overflow between the first two numbers, and then use the result of the first two numbers to detect the overflow between the third number and the result of the first two numbers. Repeat this process until you get the final result.</p>"},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#two-methods-to-detect-overflow-in-twos-complement","title":"Two methods to detect overflow in two's complement","text":""},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#method-1-compare-the-sign-bit-of-operands-and-result","title":"Method 1: Compare the sign bit of operands and result","text":""},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#conclusion","title":"Conclusion","text":"<p>If the sign bit, also known as MSB(Most Significant Bit), of the two operands are the same, but the sign bit of the result is different from the sign bit of the operands, then the overflow occurs.</p>"},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#reasons-behind","title":"Reasons behind","text":"<ol> <li> <p>Why do we need to check whether the sign bit of the two operands are the same?</p> <p>Since if the sign bit of the two operands are different, the result will always be in the range of the two operands, which means the result will never overflow. Specifically speaking, if you subtract A from B, the result will always be smaller than B. Since both A and B are in the range which can be represented by two's complement, the result will also always be in the range which can be represented by two's complement. Thus, no overflow will occur when the sign bit of the two operands are different. Contrarally speaking, overflow will only happen when the sign bit of the two operands are the same.</p> </li> <li> <p>How to understand the Conclusion?</p> <p>To rigorously prove that, the problem can be divided into two cases. </p> <ol> <li> <p>case one:</p> <p>The sign bit of the two operands are both 0 while the sign bit of the result if 1. Before you move on, you need to know that in the two's complement system, if the sign bit is 0, it means that the number is positive. If the sign bit is 1, it means the number is negative. So, now let's go back to our case one. In case one, the sign bit of the two operands are both 0, which means the two operands are both positive. Since the sign bit of the result is 1, which means the result is negative. Now, you will find that when you add this two positive operands, you get a negative result. There must be something wrong! Yes, the result is out of the range which can be represented by two's complement. Thus, overflow occurs.</p> </li> <li> <p>case two:</p> <p>Now the sign bit of your two operands are both 1, while the sign bit of the result is 0. Similar with case one, now you will find that during this time, you add two positive number but get a negative number as the result. This time, you must be confident that an overflow has happened.</p> </li> </ol> </li> </ol> <p>In conclusion, after analyzing these two cases, I have proved that the Conclusion we have mentioned above is correct. Now, you may have  a basic understanding of the overflow in two's complement system.</p>"},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#implementation","title":"Implementation","text":""},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#method-2-compare-the-carry-on-bit-and-carry-out-bit-of-the-msb-column","title":"Method 2: Compare the carry-on bit and carry-out bit of the MSB column","text":""},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#conclusion_1","title":"Conclusion","text":"<p>If the carry-on bit and carry-out bit of the MSB column are different, then the overflow occurs.</p>"},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#reasons-behind_1","title":"Reasons behind","text":"<p>To rigorously prove that, the problem can be divided into two cases since in a binary system, we only have 0 and 1.</p> <ol> <li> <p>case one:</p> <p>The carry-on bit is 1 and the carry-out bit is 0. So, in order to let the carry-out bit be 1, the sign bit of the two operands must be 0. (You can easily understand this by trying yourself. i.e. If any of the sign bit is 1, then 1 + 1 = 10, which will generate a carry-out bit of 1. Contraction!) Now, let's see the MSB column, which contains three numbers, above the line are the sign bits of two operands. Below the line is the sign bit of the result. Based on the previous statement, from top to bottom, the three numbers should be 0,  0, 1. Now, you will find that the sign bit of the result is different from the sign bit of the two operands. Based on what we have already discussed in  Method 1, you will find that an overflow has happened.</p> </li> <li> <p>case two:</p> <p>Now the carry-on bit is 0 and the carry-out bit is 1. Using the similar method discussed in case one, you can easily find that the overflow has happened. So, I won't repeat it here.</p> </li> </ol> <p>Now, Method 2 has also been proved to be correct! Congratulations! Now, hope that you already have a brand new undestanding of the overflow in two's complement system.</p>"},{"location":"blog/2023/09/14/overflow-in-twos-complement-system/#implementation_1","title":"Implementation","text":""},{"location":"blog/2023/09/09/tricky-python/","title":"Tricky Python","text":"<p>Hey, are you still confused about some interesting functions and methods in Python. Don't worry, after reading this post, maybe you will gain a quick command of these interesting but \"tricky\" functions and methods in Python. </p> <p>Important</p> <p>methods and functions are not the same thing. A function is a piece of code that performs some operations. e.g. <code>len()</code>. Unlike a function, a method is applied in the context of a particular object. This is indicated by the dot notation invocation. e.g. <code>myList.append()</code>. </p> <p>Task list for this post:</p> <ul> <li> Add Introduction part</li> <li> Add tuple part</li> <li> Add list part<ul> <li> Add slice part </li> </ul> </li> <li> The difference between Method and Function</li> <li> Add List Functions part</li> <li> Add List Methods part</li> <li> Add String Functions part</li> <li> Add String Methods part</li> <li> Argument and Parameter</li> </ul>"},{"location":"blog/2023/09/09/tricky-python/#introduction","title":"Introduction","text":"<p>Add something here after finishing the writing of the whole post.</p> <p>Note</p> <p>This post is just a study product during my Python learning, so it may not contain all the aspects of interesting Python functions. Also, this post can be used as a reference to SC1003 Introduction to Computational Thinking  in NTU SCSE. BTW, if you find something incorrect in this post, please let me know by either opening a commit or making a pull request if you can fix it. Thank you very much!</p> <p>Important</p> <p>Since I may not have enough time to do all the introduction work of some basic concepts in Python, I will only cover the functions related to a specific topic. If you need some help on basic concepts in Python, try google or something equivalent first, I believe that there are some very useful resources on the Internet. If you are still at a loss, you can also comment at the bottom of this blog. I will help you as soon as possible. Thanks.</p>"},{"location":"blog/2023/09/09/tricky-python/#boolean-operands","title":"Boolean Operands","text":"<ol> <li>In Python, you can use either <code>&amp;</code> or <code>and</code> to implement the and operation. Similarly, you can use either <code>or</code> or <code>|</code> to represent the or operation.</li> </ol>"},{"location":"blog/2023/09/09/tricky-python/#string","title":"String","text":""},{"location":"blog/2023/09/09/tricky-python/#string-methods","title":"String Methods","text":""},{"location":"blog/2023/09/09/tricky-python/#upper-lower","title":"<code>.upper()</code> <code>.lower()</code>","text":"<p>In Python, we will use <code>myString.upper()</code> and <code>myString.lower()</code> to convert the string to upper or lower letters.</p> Python <pre><code>myString = \"hello world\"\nmyString.upper() # \"HELLO WORLD\"\nmyString.lower() # \"hello world\"\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#isupper-islower-isdigit","title":"<code>.isUpper()</code> <code>isLower()</code> <code>isDigit()</code>","text":"<p>Python has provided us with some very useful functions, they are <code>string.isUpper()</code>, <code>string.isLower()</code>, <code>string.isDigit()</code>. These functions can help us quickly check whether there is a Upper or lower letter or a digit in the string.</p> Python <pre><code># Initialize the flag\nUpper = False\nLower = False\nDigit = False\n\n# Use for loop to traverse each letter in the string\nfor x in anyString:\n    if x.isupper():\n        Upper = True\n    if x.islower():\n        Lower = True\n    if x.isdigit():\n        Digit = True\n\n# Check if there is a upper letter, lower letter or digit in this string\nif Upper:\n    print(\"There is at least one Upper letter in this string\")\nif Lower:\n    print(\"There is at least one Lower letter in this string\")\nif Digit:\n    print(\"There is at least one Digit in this string\")\n</code></pre> <p>Check Special Letters</p> <p>Note</p> <p>This is a tricky question since the definition of special letter here is not clearly defined. Maybe it means the special letters on your keyboard, or it may be some other special letters which are not on your keyboard. That's really tricky. But I will still provide two methods to try to solve this question.</p> <ol> <li> <p>Use a dictionary to store all the special letters. Then you can easily use <code>in</code> keyword to check if there is a special letter in the string.</p> </li> <li> <p>Try using the ASCII table. Firstly, you should convert the letter to  ASCIIand then see if it is in the correct range of special letters in the ASCII table.</p> </li> </ol>"},{"location":"blog/2023/09/09/tricky-python/#find","title":"<code>.find()</code>","text":"<p>In Python, we use <code>myString.find()</code> method to find the first occurrence of the specified value. If the value is not found, the <code>find()</code> method returns <code>-1</code>, otherwise it returns the index of the first occurrence of the specified value.</p> Python <pre><code>myString = \"hello world\"\nmyString.find(\"world\") # 6\nmyString.find(\"worlds\") # -1\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#join","title":"<code>.join()</code>","text":"<p>In Python, we will <code>myString.join(target)</code> method to make a new string by joining all the elements in an iterable (list, tuple, string etc.) separated by  <code>myString</code>. </p> Python <pre><code>myString = \"hello world\"\nmyString.join(\"123\") # \"1hello world2hello world3\"\n</code></pre> <p>Note</p> <p>In Python, we can chain methods together. e.g.  <code>myString.upper().join(\"123\")</code> will return <code>\"1HELLO WORLD2HELLO WORLD3\"</code> if <code>myString = \"hello world\"</code>.</p>"},{"location":"blog/2023/09/09/tricky-python/#split","title":"<code>.split()</code>","text":"<ul> <li> <p>The string method <code>spilt()</code> generates a sequence of characters by splitting the string at certain split-characters.</p> <ul> <li>Default split-character is the white space</li> </ul> </li> <li> <p>The string method, <code>split()</code>, returns a list.</p> </li> </ul> Python <pre><code>myString = \"hello world\"\nnewList = myString.split()\nprint(newList) # [\"hello\", \"world\"]\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#string-functions","title":"String Functions","text":""},{"location":"blog/2023/09/09/tricky-python/#len","title":"<code>len()</code>","text":"<p>In Python, we use <code>len()</code> function to calculate the length of a string.</p> Python <pre><code>myString = \"hello world\"\nlen(myString) # 11\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#other-string-stuff","title":"Other String Stuff","text":""},{"location":"blog/2023/09/09/tricky-python/#concatenate-strings","title":"Concatenate strings","text":"<p>In Python, we use <code>+</code> operator to concatenate strings.</p> Python <pre><code>myString = \"hello world\"\nmyString = myString + \"123\" # \"hello world123\"\n</code></pre> <p>In the meantime, we can also use <code>f\"{}\"</code> to link strings. It is usually called formatted strings. Format string is very powerful, it can be used to concatenate several different types of variables. However, the <code>+</code> operator we've mentioned above can only be used to concatenate strings.</p> <p>Here is how we can use <code>f\"{}\"</code> to concatenate strings:</p> Python <pre><code>myString = \"hello world\"\nmyString = f\"{myString}123\" # \"hello world123\"\n</code></pre> <p>Tips</p> <p>There is a good post discussing the pros and cons between the format string and the normal string on stack overflow. You can check it out if you are interested.</p>"},{"location":"blog/2023/09/09/tricky-python/#repeat-strings","title":"Repeat Strings","text":"<p>In Python, we use <code>*</code> operator to repeat strings.</p> Python <pre><code>myString = \"hello world\"\nmyString = myString * 3 # \"hello worldhello worldhello world\"\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#membership-operations","title":"Membership Operations","text":"<p>In Python, we use <code>in</code> keyword to check if a string is present in another string. e.g. <code>if \"hello\" in myString:</code></p> Python <pre><code>myString = \"hello world\"\nprint(hello in myString) # True\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#string-slicing","title":"String Slicing","text":"<p>In Python, we use <code>myString[start:end:step]</code> to slice a string.</p> Python <pre><code>myString = \"hello world\"\nprint(myString[0:5:2]) # \"hlo\"\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#extended-slicing","title":"Extended Slicing","text":"<p>Copy a String using <code>myString[:]</code> or <code>''.join(myString)</code></p> Python <pre><code>myString = \"hello world\"\nprint(myString[:]) # \"hello world\"\nprint(''.join(myString)) # \"hello world\"\n</code></pre> <p>Reverse a String using <code>myString[::-1]</code></p> Python <pre><code>myString = \"hello world\"\nprint(myString[::-1]) # \"dlrow olleh\"\n</code></pre> <p>The index of a String</p> <p> </p>"},{"location":"blog/2023/09/09/tricky-python/#getting-the-code","title":"Getting the code","text":"<p>There are two common systems for representing characters: ASCII and Unicode. In Python, we use <code>ord()</code> function to get the code of a character. e.g. <code>ord(\"a\")</code> will return <code>97</code>. And vice versa, we use <code>chr()</code> function to get the character of a code. e.g. <code>chr(97)</code> will return <code>\"a\"</code>.</p> <p> </p>"},{"location":"blog/2023/09/09/tricky-python/#escape-characters","title":"Escape Characters","text":"<p>In Python, we use <code>\\</code> to escape characters.</p> Python <pre><code>myString = \"hello \\\"world\\\"\"\nprint(myString) # \"hello \"world\"\"\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#list-dictionary-and-tuple","title":"List, Dictionary and Tuple","text":"<p>First, before we talk about Dictionary, List and Tuple, we may need to know what is a Composite Type. A Composite Type is a data type which is constructed using primitive and other composite types. Also, it can be regarded as a new data type made from existing ones.</p> <p>Then, we may need to know about data structures. Data structure are particular ways of storing data to make some operations easier or more efficient. Different data structures have different characteristics.</p> <p>And now, you may find that the Dictionary, List and Tuple are all data structures in Python. They are also three Composite Types. So, let's talk    about them one by one.</p> <p>Important</p> <p>In this section, <code>myDict</code>, <code>myList</code> and <code>myTuple</code> will be the default name of these three types of data structures I will use in Python.</p>"},{"location":"blog/2023/09/09/tricky-python/#list","title":"List","text":"<p>Let's start from List because it is the most fundamental one.</p> <p>Definition</p> <p>Python list is an ordered sequence of items.</p> <p>Note</p> <p>String is also an ordered sequence of items. But the difference between String and List is that String is immutable while List is mutable.</p> <p>How to create a list?</p> <p>In Python, we can either use <code>[]</code> or <code>list()</code> to create a list.</p> Python <pre><code>myList = [\"hello\", \"world\", \"123\"]\nmyList = list(\"hello world 123\")\n# ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', ' ', '1', '2', \n# '3']\n</code></pre> <p>Remeber that in the previous String part, I have introduced the use of <code>.spilt()</code> method. In fact, <code>.spilt()</code> method can also be used to create a list. You can go back to review that!</p> <p>Want to create a numerical list faster?</p> <p>By using the <code>range()</code> function, you can quickly create a numerical list without doing repetitive work.</p> Python <pre><code>myList = list(range(1, 10)) # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>Also, you need to know about list comprehension. It is a very useful way to create a list. </p> Python <pre><code>myList = [x for x in range(1, 10)] # [1, 2, 3, 4, 5, 6, 7, 8, 9]\nmyList = [x ** 2 for x in range(1,10)] # [1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre> <p>List comprehension can be divided into three parts.</p> <ol> <li> <p>The variable name.  </p> </li> <li> <p>The expression. </p> <p>In the example above, the expression is <code>x</code> and <code>x ** 2</code> respectively. </p> </li> <li> <p>The for loop</p> <p>It is used to generate the numbers you want to feed into the expression.</p> </li> </ol> <p>Similarities between String and List</p> <ul> <li>Concatenate: <code>+</code>(only for the same type.  String + String or List + List. Not String + List)</li> <li>Repeat: <code>*</code></li> <li>Indexing: the <code>[ ]</code> operator, e.g. <code>lst[3]</code> returns the fourth element of <code>lst</code>.'</li> <li>Slicing: the <code>[ : ]</code> operator, e.g. <code>lst[1:3]</code> returns a list containing the second and third elements of <code>lst</code>.</li> <li>Length: the <code>len()</code> function</li> <li>Membership: the <code>in</code> operator</li> </ul> <p>Differences between String and List</p> <ul> <li> <p>Lists can contain any type of element, but strings are limited to characters.</p> <ul> <li>e.g. <code>l = [1, 'bill', 1.2345, True]</code></li> </ul> </li> <li> <p>Lists are mutable, but strings are immutable.</p> </li> <li> <p>Lists are designated with <code>[ ]</code>, with elements separated by commas<code>,</code> strings use<code>\"\"</code>.</p> </li> </ul> <p>List Structure</p> myList 1 'a' 3.14 True Index Forward 0 1 2 3 Index Backward -4 -3 -2 -1 <p><code>myList[1]</code> \u2192 <code>'a'</code></p> <p><code>myList[:3]</code> \u2192 <code>[1, 'a', 3.14]</code> </p>"},{"location":"blog/2023/09/09/tricky-python/#list-methods","title":"List Methods","text":""},{"location":"blog/2023/09/09/tricky-python/#basic-methods","title":"Basic methods","text":"<ul> <li> <p>Index assignment</p> <p>e.g. <code>myList[0] = 'a'</code></p> </li> <li> <p>Append</p> <p>e.g. <code>myList.append(e) // e can be anything</code></p> </li> <li> <p>Extend</p> <p>e.g. <code>myList.extend(['a', 'b', 'c'])</code></p> </li> <li> <p>Pop</p> <p>e.g. <code>myList.pop(i) // i: index (default:-1)</code></p> </li> <li> <p>Insert</p> <p>e.g. <code>myList.insert(i, x) // i: index, x: element</code></p> Python <pre><code>myList = [1, 2, 3]\nmyList.insert(1, 4) # [1, 4, 2, 3]\nmyList.insert(-1, 4) # [1, 4, 2, 4, 3]\n# insert before the index of the original element\n</code></pre> </li> <li> <p>Remove</p> <p>Note</p> <p>The method will remove the first occurrence of the element in the list. Then the second. Etc.</p> <p>e.g. <code>myList.remove(x) // x: element</code></p> Python <pre><code>myList = [1, 2, 3, 2, 1, 2]\nmyList.remove(2) # [1, 3, 2, 1, 2]\nmyList.remove(2) # [1, 3, 1, 2]\nmyList.remove(2) # [1, 3, 1]\n</code></pre> </li> <li> <p>Reverse</p> <p>e.g. <code>myList.reverse()</code></p> </li> <li> <p>Sort</p> <p>Note</p> <p>Only lists have a built-in sorting method Thus, data should be converted to a list if it needs sorting.</p> Python <pre><code>myLst = list('xyzabc') # iterable to constructor\nmyLst.sort() # ['a', 'b', 'c', 'x', 'y', 'z']\n# convert back to a string\nsortStr = ''.join(myLst) # 'abcxyz'\n</code></pre> </li> </ul>"},{"location":"blog/2023/09/09/tricky-python/#list-functions","title":"List Functions","text":""},{"location":"blog/2023/09/09/tricky-python/#basic-functions","title":"Basic functions","text":"<ul> <li> <p><code>len()</code>: Number of elements in the list(top level)</p> <p>e.g. <code>len([1, [1, 2], 3])</code> \u2192 <code>3</code></p> </li> <li> <p><code>min()</code>: Minimum value in the list</p> <p>e.g. <code>min([1, 2, 3])</code> \u2192 <code>1</code></p> </li> <li> <p><code>max()</code>: Maximum value in the list</p> <p>e.g. <code>max([1, 2, 3])</code> \u2192 <code>3</code></p> </li> <li> <p><code>sum()</code>: Sum of the elements, numeric only</p> <p>Note</p> <p>make sure the elements are numeric. You can't add numbers to strings or lists.</p> </li> </ul>"},{"location":"blog/2023/09/09/tricky-python/#dictionary","title":"Dictionary","text":"<p>Note</p> <p>In this section, <code>myDict</code> will be the name of the dictionary that I will use in Python.</p>"},{"location":"blog/2023/09/09/tricky-python/#keys-and-values","title":"Keys and Values","text":"<p>Keys and values are two very important concepts in Dictionary. In Python, Dictionaries are used to store data value in <code>key:value</code> pairs. Each key in the Dictionary may have zero or one or multiple values.</p> <p>How to assign multiple values to one key?</p> <p>Let's say that in Python, we usually use <code>lists</code> or <code>tuples</code> to store a bunch of values. Similarly, we still can use these two data structures to store different values of a key element in the Dictionary. However, one thing you should notice is that <code>tuple</code> is immutable while <code>list</code> is mutable.</p> <p>Below is the demo:</p> Python <pre><code># List method\nmyDict = {\"userName\":[\"Jack\",\"Tom\",\"James\",\"Andy\"]} \n# You can add anything to the \"userName\"\n\n# Tuple method\nmyDict = {\"userName\":(\"Jack\",\"Tom\",\"James\",\"Andy\")} \n# You can't add something or delete something to \"userName\"\n# Since tuples are immutable\n</code></pre> <p>How to add values to one key in Dictionary?</p> <p>Firstly, you need to make sure that you have used the <code>list</code> method. Secondly, all you need to do is just using the methods owned by <code>list</code> in Python. For example, if you want to add value, you need to use <code>myList.append()</code>.</p> Python <pre><code>myDict.[\"userName\"].append(name)  \n</code></pre> <p>Note</p> <p>If you want to use <code>.append()</code> to add values to your key, make sure to initialize your key's value with a <code>list</code>. Otherwise, the program will crash because the default value tupe is <code>string</code> and it is immutable.</p> <p>Get the <code>keys</code> and <code>values</code> in the dictionary</p> <p>Python is very powerful, if you want to get the <code>keys</code> and <code>values</code> of a dictionary, you only need to use <code>myDict.keys()</code> to get the <code>keys</code> and <code>myDict.values()</code> to get the <code>values</code>.</p> Python <pre><code>myDict.keys() # Get keys\nmyDict.values() # Get values\n</code></pre> <p>Note</p> <p>Please note that the <code>myDict.keys()</code> will return a value with <code>dict_keys</code>. Similarly, <code>myDict.values()</code> will return a value with <code>dict_values</code>. These two results can be treated as <code>lists</code>.</p> <p>How to judge whether a string has appeared in your dictionary's <code>values</code>?</p> <p>Don't worry. Python's <code>in</code> keyword can do this perfectly.  e.g. You want to check whether \"Tom\" is your <code>values</code> in the dictionary. </p> Python <pre><code>if \"Tom\" in myDict.values():\n# Add stuff here\n</code></pre> <p>Tip</p> <p><code>in</code> is an important keyword in Python. It mainly has two functions. One is to check if a value is present in a sequence (list, range, string etc). The other is to iterate through a sequence in a <code>for</code> loop.</p> <p>Add new <code>{keys:values}</code> pair to Dictionary.</p> <p>Python Dictionary has provided a very useful method called <code>myDict.update()</code> to let you add new <code>{keys:values}</code> pair to your dictionary quickly and conveniently.</p> <p>Below is the demo:</p> Python <pre><code>newUser = {\"Tom\":\"123456\"} # This is a User:Password pair\nmyDict.update(newUser)\n</code></pre> <p>Note</p> <p>Every time you call the <code>update()</code> method, it won't erase your original <code>{keys:values}</code> in the dictionary. Instead, it will add a new one at the end of the dictionary.</p> <p>Clear the Dictionary</p> <p>You can use <code>myDict.clear()</code> to clear the dictionary.</p> Python <pre><code>myDict = {\"userName\":'Jack', \"userPassword\":'123456'}\nmyDict.clear()\nprint(myDict) # {}\n</code></pre>"},{"location":"blog/2023/09/09/tricky-python/#tuples","title":"Tuples","text":"<p>After knowing List and Dictionary, I will now go on to talk about the Tuple in Python.</p>"},{"location":"blog/2023/09/09/tricky-python/#definition","title":"Definition","text":"<p>Tuples are immutable lists. Notice that there are two key words here, one is immutable, indicating that you the elements in the tuple can't be modified. The other is lists, indicating that tuples are similar to lists. Thus tuples have some similar methods and functions with lists.</p> <p>Besides, you also need to know that tuples are designated with <code>(,)</code>. This is important because when you create a tuple with one element, you must add a  comma, also a pair of parentheses. e.g. <code>myTuple = (1,)</code></p>"},{"location":"blog/2023/10/01/vhdl-introduction/","title":"VHDL Introduction","text":"<p>A short and brief introduction to VHDL.</p>"},{"location":"blog/2023/10/01/vhdl-introduction/#about-vhdl","title":"About VHDL","text":"<p>VHDL stands for VHSIC(Very High Speed Integrated Circuit) Hardware Description Languague, and resulted from an initiative funded by the U.S. Department of  Defense in the 1980s.</p> <p>VHDL allows circuit synthesis as well as circuit simulation. The former is the translation of a source code into a hardware structure that implements the intended functionality, while the latter is a testing procedure to ensure that  such functionality is indeed achieved by the synthesized circuit.</p>"},{"location":"blog/2023/10/01/vhdl-introduction/#design-flow","title":"Design Flow","text":""},{"location":"blog/2023/10/01/vhdl-introduction/#number-and-character-representation-in-vhdl","title":"Number and Character Representation in VHDL","text":""},{"location":"blog/2023/10/01/vhdl-introduction/#integers","title":"Integers","text":"<p>Examples:</p> <ul> <li>Base 10(decimals): 5, 32, 3250, 3_250, 3E2(=3*10^2)</li> <li> <p>Other bases:</p> <p>2#0111# (this is the integer 7)</p> <p>16#9F# (this is the integer 159)</p> <p>3#201#E4 ((23^2+03^1+13^0)3^4 = 1539)</p> </li> </ul> <p>Note</p> <p>The underscore character is used to improve readability of numbers. It can be used anywhere in a number except at the beginning or end, with no effect on the synthesized value.</p>"},{"location":"blog/2023/10/01/vhdl-introduction/#binary-values","title":"Binary Values","text":"<ul> <li> <p>Regular binary form:</p> <p>'0'(=0), b'0111'(=7), B'11110000'(=240)</p> </li> <li> <p>Octal and hexadecimal forms:</p> <p>o'77'(=63), O'77'(=63), x'FF'(=255), X'FF'(=255)</p> </li> </ul> <p>Note</p> <p>VHDL is not case sensitive, so '0' and 'O' are the same, and 'x' and 'X' are the same.</p>"},{"location":"blog/2023/10/01/vhdl-introduction/#characters","title":"Characters","text":"<p>Characters from an extended ASCII table are synthesizable. A single character is represented by a pair of single quotes, while a string of characters(also synthesizable) is represented by a pair of double quotes. e.g. 'A', \"mp3\"</p>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/ntu-scse-resources/","title":"NTU SCSE Resources","text":""},{"location":"blog/category/ntu-life/","title":"NTU Life","text":""},{"location":"blog/category/general/","title":"General","text":""}]}